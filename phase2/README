# Conference System - Project Phase 2

### 1. Mandatory extensions

-   There will now be many types of events. A one-speaker event is the same as a "talk" from Phase 1. You can have multi-speaker events, like a panel discussion, and no-speaker events, like a party. Events can last as long as you want. You can measure the duration of an event in hours, or minutes. You get to decide.
-   Events can be canceled by at least one organizer.
-   At least one more type of user will be included in your program. For example, an Admin user who can delete messages or events with no attendees, or a VIP user who can access VIP-only events.
-   Organizers can also create Speaker accounts, Attendee accounts, and any other type of user accounts that are in your program.
-   Each event has a maximum number of people who can attend it. This amount can be set when the event is created and also changed later, by an organizer. Your program should check the maximum capacity for the room where the event will be held, and prevent the number of attendees from going above the room's capacity.

### 2. Optional Extensions (Choose 4*)

You will implement four of these, unless you implement a GUI. Please see the note below the list. Also, if your group has fewer than 7 members, please see an instructor during an office hour or after lecture to discuss how many of the features in this section you are required to implement.

-   Allow the same users to log in and select which conference they want to participate in. Here, participation means viewing and signing up for events. The inbox can be conference-specific, or one general inbox for all messages from all conferences to that user. You decide which one.
-   Enhance the user's messaging experience by allowing them to "mark as unread", delete, or archive messages after reading them.
-   Have the program produce a neatly formatted program or schedule for the conference that users have the option of "downloading" (outputting it as html, pdf, or similar). Alternatively, if you just want the program to print the schedule to the screen, then users should be able to request a schedule by at least three of: day, by speaker, by time (all 3-4 pm talks on all days), or just the ones they have signed up for, or "liked" events (where you have to enable users to "like" events).
-   Add additional constraints to the scheduling for various types of events (e.g. technology requirements for presentations, tables vs rows of chairs). When organizers are creating events, they can see a suggested list of rooms that fit the requirements of their event.
-   Allow the system to support additional user requests (e.g. dietary restrictions, accessibility requirements) where organizers can tag a request as "pending" or "addressed". All organizers see the same list of requests, so if one tags a request as addressed, all other organizers can log in and see that.
-   Use a database to store the information from your program through specific gateway class(es) so that you do not violate Clean Architecture and still have an Entity layer.
-   Expand the menus available to organizers to allow them to get useful summary stats about the conference. Include app traffic statistics, event enrollment statistics, and top-five lists (or something similar). You should include enough statistics to make this option as complicated as the other ones on this list.
-   Replace your text UI with a Graphic User Interface (GUI), which should follow the Model-View-Presenter architecture. See the note below.

***Note:** Implementing a GUI with JavaFx, java.swing, java.awt, or Android counts as two features.


### 3. A list of features that we implemented for Phase 2

-   All the mandatory extensions mentioned above and more than two optional extensions. (Nancy, Steve, Shawn, Maggie, Jenny, Tony, Hardy, Bruce)
-   Implementing a GUI with Android, which should follow the Model-View-Presenter architecture, and a detailed analysis of the design patterns we use. (Nancy and Jenny)

Details are described below:

-   We allow the same users to log in and select which conference they want to participate in. Here, participation means viewing and signing up for events.
-   We expand the menus available to organizers to allow them to get useful summary stats about the conference. Include app traffic statistics, event enrollment statistics, and top-five-event lists.
-   We enhance the feature of adding friend: Attendees are able to add attendees as friends, organizers are able to add organizers as friends. Besides, all the users are able to search and add friends.
-   We enrich the user experience by adding a "setting" section in our GUI, the users can see their own names, email addresses and type of their own accounts.
-   We use the following design patterns in our project: Adapter, Dependency Injection, Facade, Factory, and Observer Design Patterns (Details in the pdf files in design_patterns_we_use package).
-   We enhance the users' experience by adding an additional feature: Everytime when a event is canceled by an organizer,
    the attendees (and the speakers if it as any) will automatically receive the message saying that the event has been cancelled.

### 4. Other important details:

-   We are thankful to Nancy (Kejing Li) for her excellent guidance and contribution to migrate our project to Android Studio, and thankful to Shawn (Deshang Kong) for making the following video demos:
-   Please refer to the video demos for how to download and install Android Studio and run our project: 207_demo.
-   https://youtu.be/gc34WXBEiVI [This](https://youtu.be/gc34WXBEiVI) is the link to the youTube video showing how to download and install Android Studio.
-   https://youtu.be/J9Mjt3aRb8M [This](https://youtu.be/J9Mjt3aRb8M) is the link to the youTube video demonstrating an example usage of our project.

-   207_demo in the phase2 package contains the latest version of our project copied from the GitHub private repository we developed for phase2 on the Android Studio platform.
-   Android_demo is for testing purpose (We were trying to see if the Android Studio project moved here was able to run without issue and explore what configuration in gradle files or other places we had to make).
-   The UML design is in design_UML folder inside of the phase2 package.
-   The list of design patterns that we used is inside design_patterns_we_use folder inside of the phase 2 package.

-   We were contributing to Nancy's private project repository for the developing of the Android Studio part before we finally copied the whole project in phase2 folder, and named it 207_demo. Which will remain private until we are told to be able to make it public.
-   A lot of developing of the project phase 2 was carried out on Android studio, which we each downloaded on our personal computers. Unfortunately, the commits made there are not shown on Markus, we were only able to save a log.csv file listing the commits.
-   If you need to take a look at our project there on GitHub, please contact Jenny (sjy.su@mail.utoronto.ca) and she will be able to give you her personal GitHub account to help you check our detailed development there on that private repository.

-   Throughout the phase 1 and phase 2 of our project, everyone of us is putting our best of effort working together and help each other. We have all been learning a lot through developing this project.
-   Last but not least, we would like to thank our course instructors and TA for helping us throughout the development of the two phases of our project.